// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  emailVerified DateTime?
  team      Team?    @relation("UserTeam") // Jedna drużyna przypisana do użytkownika
  matches   Match[]  @relation("UserMatches")
  createdAt DateTime @default(now())
}

model Team {
  id        String   @id @default(cuid())
  name      String
  owner     User     @relation("UserTeam", fields: [ownerId], references: [id]) // Powiązanie z użytkownikiem
  ownerId   String   @unique // Klucz właściciela drużyny
  players   Player[]
  matches   Match[]
  applications Application[] // Zgłoszenia drużyny do meczów
  createdAt DateTime @default(now())
}

model Player {
  id        String   @id @default(cuid())
  name      String
  position  String
  skillLevel String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  createdAt DateTime @default(now())
}

model Match {
  id          String   @id @default(cuid())
  title       String
  location    String
  dateTime    DateTime @default(now()) // Pole typu DateTime dla daty i godziny
  description String
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      String
  user        User     @relation(name: "UserMatches", fields: [userId], references: [id])
  userId      String
  status      String   @default("Dołącz")
  applications Application[] // Relacja z tabelą zgłoszeń
  createdAt   DateTime @default(now())
}

model Application {
  id          String   @id @default(cuid())
  team        Team     @relation(fields: [teamId], references: [id]) // Drużyna zgłaszająca
  teamId      String
  match       Match    @relation(fields: [matchId], references: [id]) // Mecz, do którego drużyna się zgłasza
  matchId     String
  status      String   @default("pending") // Status zgłoszenia: "pending", "confirmed", "rejected"
  createdAt   DateTime @default(now())
}

model VerificationToken {
  id        String   @id @default(cuid())
  identifier String   // E-mail lub inne unikalne ID użytkownika
  token      String   @unique // Token weryfikacyjny
  expires    DateTime // Data wygaśnięcia tokenu
  createdAt  DateTime @default(now())
  @@unique([identifier, token]) // Unikalny klucz złożony dla identyfikatora i tokenu
}